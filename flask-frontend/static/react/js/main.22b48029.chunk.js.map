{"version":3,"sources":["Components/ThemeProviderComponent.js","Components/Poll/PollForm.js","Components/Poll/PollCard.js","Components/Poll/PollPage.js","App.js","reportWebVitals.js","index.js"],"names":["ThemeProviderComponent","children","prefersDarkMode","useMediaQuery","theme","createMuiTheme","palette","type","ThemeProvider","PollForm","pollInfo","useState","optionA","optionB","optionC","optionD","optionE","pollOptions","setPollOptions","classes","makeStyles","Form","display","flexDirection","Grow","flexGrow","Button","justifySelf","useStyles","checkHandler","event","target","name","checked","onSubmit","preventDefault","className","optionACount","FormControlLabel","control","Checkbox","onChange","label","optionATitle","optionBCount","optionBTitle","optionCCount","optionCTitle","optionDCount","optionDTitle","optionECount","optionETitle","variant","PollCard","Card","height","width","CardContent","boxSizing","clasName","Typography","title","PollPage","props","setPollInfo","info","setState","state","a","body","JSON","stringify","pollId","this","match","params","fetch","method","headers","response","json","data","Response","React","Component","withRouter","App","style","justifyContent","paddingTop","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"js/main.22b48029.chunk.js","sourcesContent":["import { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\nimport { useMediaQuery } from '@material-ui/core'\nconst ThemeProviderComponent = ({ children }) => {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const theme = createMuiTheme({\n    palette: {\n      type: prefersDarkMode ? 'dark' : 'light',\n    },\n  })\n\n  return (\n    <ThemeProvider theme={theme}>\n      {children}\n    </ThemeProvider>\n  )\n}\n\nexport default ThemeProviderComponent\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport {\n  FormControlLabel,\n  Checkbox, Button,\n  Card, CardContent,\n  Typography,\n  useMediaQuery\n} from '@material-ui/core'\n\nconst PollForm = ({ pollInfo }) => {\n\n  const [pollOptions, setPollOptions] = useState(\n    {\n      optionA: false,\n      optionB: false,\n      optionC: false,\n      optionD: false,\n      optionE: false\n    }\n  )\n\n  const useStyles = makeStyles({\n    Form: {\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    Grow: {\n      flexGrow: 1\n    },\n    Button: {\n      justifySelf: \"flex-end\"\n    }\n  })\n  const classes = useStyles()\n\n  const checkHandler = (event) => {\n    setPollOptions({[event.target.name]: [event.target.checked]})\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault()\n  }\n\n  return (\n    <form onSubmit={submitHandler} className={\"PollForm \" + classes.Form}>\n      { pollInfo.optionACount == null ? <div></div> : (\n        <FormControlLabel\n          control={<Checkbox name=\"optionA\" onChange={checkHandler} checked={pollOptions.optionA} />}\n          label={pollInfo.optionATitle}\n          />\n      )}\n      { pollInfo.optionBCount == null ? <div></div> : (\n        <FormControlLabel\n          control={<Checkbox name=\"optionB\" onChange={checkHandler} checked={pollOptions.optionB} />}\n          label={pollInfo.optionBTitle}\n          />\n      )}\n      { pollInfo.optionCCount == null ? <div></div> : (\n        <FormControlLabel\n          control={<Checkbox name=\"optionC\" onChange={checkHandler} checked={pollOptions.optionC} />}\n          label={pollInfo.optionCTitle}\n          />\n      )}\n      { pollInfo.optionDCount == null ? <div></div> : (\n        <FormControlLabel\n          control={<Checkbox name=\"optionD\" onChange={checkHandler} checked={pollOptions.optionD} />}\n          label={pollInfo.optionDTitle}\n          />\n      )}\n      { pollInfo.optionECount == null ? <div></div> : (\n        <FormControlLabel\n          control={<Checkbox name=\"optionE\" onChange={checkHandler} checked={pollOptions.optionE} />}\n          label={pollInfo.optionETitle}\n          />\n      )}\n      <div className={classes.Grow}></div>\n      <Button className={classes.Button} variant=\"contained\" type=\"submit\">Vote</Button>\n    </form>\n  )\n}\n\nexport default PollForm\n","import { makeStyles } from '@material-ui/core/styles'\nimport {\n  Card, CardContent,\n  Typography,\n  useMediaQuery\n} from '@material-ui/core'\n\nimport ThemeProviderComponent from '../ThemeProviderComponent'\nimport PollForm from './PollForm'\n\nconst PollCard = ({ pollInfo }) => {\n\n  const useStyles = makeStyles({\n    Card: {\n      height: \"450px\",\n      width: \"375px\"\n    },\n    CardContent: {\n      boxSizing: \"border-box\",\n      height: \"calc(100% - 16px)\"\n    }\n  })\n  const classes = useStyles()\n\n  return (\n    <ThemeProviderComponent>\n      <Card className={classes.Card}>\n        <CardContent className={classes.CardContent}>\n          <div clasName=\"PollTitle\">\n            <Typography variant=\"h3\">{pollInfo.title}</Typography>\n          </div>\n          <PollForm pollInfo={pollInfo}/>\n        </CardContent>\n      </Card>\n    </ThemeProviderComponent>\n  )\n}\n\nexport default PollCard\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport PollCard from './PollCard'\nimport './css/Poll.css'\nclass PollPage extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      pollInfo: {}\n    }\n  }\n\n  async componentDidMount() {\n    const body = JSON.stringify(\n      {\n        pollId: this.props.match.params.pollId\n      }\n    )\n    const response = await fetch(\"/Api/467586970086574653/read\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body\n    })\n    const data = await response.json()\n\n    this.setState({pollInfo: data.Response})\n  }\n\n  setPollInfo = (info) => {\n    this.setState({pollInfo: info})\n  }\n\n  render() {\n    return (\n      <PollCard pollInfo={this.state.pollInfo}/>\n    )\n  }\n}\n\nexport default withRouter(PollPage)\n","import { BrowserRouter as Router, Route, Switch, useParams } from 'react-router-dom'\nimport PollPage from './Components/Poll/PollPage'\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\" style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        paddingTop: \"50px\"\n      }}>\n        <Switch>\n          <Route exact path=\"/\">\n            <p>Hello There</p>\n          </Route>\n          <Route exact path=\"/poll/:pollId\">\n            <PollPage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}