{"version":3,"sources":["Components/ThemeProviderComponent.js","Components/Poll/PollForm.js","Components/Poll/PollResult.js","Components/Poll/PollResults.js","Components/Poll/PollCard.js","Components/Poll/PollPage.js","Components/CreatePoll/CreatePollForm.js","Components/CreatePoll/CreatePollPage.js","App.js","reportWebVitals.js","index.js"],"names":["ThemeProviderComponent","children","prefersDarkMode","useMediaQuery","theme","createMuiTheme","palette","type","ThemeProvider","PollForm","pollId","pollInfo","onVote","useState","optionA","optionB","optionC","optionD","optionE","pollOptions","setPollOptions","classes","makeStyles","Form","display","flexDirection","height","Grow","flexGrow","Button","justifySelf","useStyles","checkHandler","event","target","name","checked","submitHandler","a","preventDefault","option","console","warn","fetch","method","headers","body","JSON","stringify","response","json","onSubmit","className","optionACount","optionATitle","FormControlLabel","control","Checkbox","onChange","label","optionBCount","optionBTitle","optionCCount","optionCTitle","optionDCount","optionDTitle","optionECount","optionETitle","variant","PollResult","value","max","Typography","style","width","PollResults","props","defaultState","All","state","Response","this","setState","match","params","data","setAll","log","React","Component","withRouter","PollCard","voted","setVoted","Card","CardContent","boxSizing","componentDidMount","onLoad","clasName","title","PollPage","CreatePollForm","defaultOptions","Title","OptionA","OptionB","OptionC","OptionD","OptionE","options","setOptions","changeHandler","prevOptions","Value","Body","length","window","location","replace","TextField","placeholder","CreatePollPage","App","justifyContent","paddingTop","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"js/main.1e70a595.chunk.js","sourcesContent":["import { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\nimport { useMediaQuery } from '@material-ui/core'\n\n// ThemeProviderComponent\nconst ThemeProviderComponent = ({ children }) => {\n\n  // Does Prefer Dark Mode\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  // Set theme\n  const theme = createMuiTheme({\n    palette: {\n      type: prefersDarkMode ? 'dark' : 'light',\n    },\n  })\n\n  // Return theme with children\n  return (\n    <ThemeProvider theme={theme}>\n      {children}\n    </ThemeProvider>\n  )\n}\n\nexport default ThemeProviderComponent\n","// React\nimport React, { useState } from 'react'\n// Material-ui\nimport { FormControlLabel, Checkbox, Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\n// Poll Form\nconst PollForm = ({ pollId, pollInfo, onVote }) => {\n\n  // State\n  const defaultPollOptions = {\n    optionA: false,\n    optionB: false,\n    optionC: false,\n    optionD: false,\n    optionE: false\n  }\n  const [pollOptions, setPollOptions] = useState(defaultPollOptions)\n\n  // Styles\n  const useStyles = makeStyles({\n    Form: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      height: \"calc(100% - 32px)\"\n    },\n    Grow: {\n      flexGrow: 1\n    },\n    Button: {\n      justifySelf: \"flex-end\"\n    }\n  })\n  const classes = useStyles()\n\n  // Handle Checkboxes\n  const checkHandler = (event) => {\n    setPollOptions({[event.target.name]: [event.target.checked]})\n  }\n\n  // whatOption\n  const whatOption = () => {\n    if (pollOptions.optionA) {\n      return \"A\"\n    } else if (pollOptions.optionB) {\n      return \"B\"\n    } else if (pollOptions.optionC) {\n      return \"C\"\n    } else if (pollOptions.optionD) {\n      return \"D\"\n    } else if (pollOptions.optionE) {\n      return \"E\"\n    } else {\n      console.warn(\"No option selected\")\n      return \"\"\n    }\n  }\n\n  // Handle form submit\n  const submitHandler = async (event) => {\n    // Prevent default submit\n    event.preventDefault()\n\n    // whatOption\n    const option = whatOption()\n\n    // Return if option is empty\n    if (option == \"\") return\n\n    // Make vote request\n    const response = await fetch(\"/Api/467586970086574653/vote\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({pollId, option})\n    })\n    const data = await response.json()\n\n    // Invert voted\n    onVote()\n  }\n\n  return (\n    <form\n      onSubmit={submitHandler}\n      className={\"PollForm \" + classes.Form}>\n\n      { pollInfo.optionACount == null || pollInfo.optionATitle == \"None\" ? <div></div> : (\n        <FormControlLabel\n          control={<Checkbox name=\"optionA\" onChange={checkHandler} checked={pollOptions.optionA} />}\n          label={pollInfo.optionATitle}\n          />\n      )}\n      { pollInfo.optionBCount == null || pollInfo.optionBTitle == \"None\" ? <div></div> : (\n        <FormControlLabel\n          control={<Checkbox name=\"optionB\" onChange={checkHandler} checked={pollOptions.optionB} />}\n          label={pollInfo.optionBTitle}\n          />\n      )}\n      { pollInfo.optionCCount == null || pollInfo.optionCTitle == \"None\" ? <div></div> : (\n        <FormControlLabel\n          control={<Checkbox name=\"optionC\" onChange={checkHandler} checked={pollOptions.optionC} />}\n          label={pollInfo.optionCTitle}\n          />\n      )}\n      { pollInfo.optionDCount == null || pollInfo.optionDTitle == \"None\" ? <div></div> : (\n        <FormControlLabel\n          control={<Checkbox name=\"optionD\" onChange={checkHandler} checked={pollOptions.optionD} />}\n          label={pollInfo.optionDTitle}\n          />\n      )}\n      { pollInfo.optionECount == null || pollInfo.optionETitle == \"None\" ? <div></div> : (\n        <FormControlLabel\n          control={<Checkbox name=\"optionE\" onChange={checkHandler} checked={pollOptions.optionE} />}\n          label={pollInfo.optionETitle}\n          />\n      )}\n\n      <div className={classes.Grow}></div>\n      <Button className={classes.Button} variant=\"contained\" type=\"submit\">Vote</Button>\n    </form>\n  )\n}\n\nexport default PollForm\n","// React\nimport React from 'react'\n// Material-ui\nimport { Typography } from '@material-ui/core'\n\n// Poll Result\nconst PollResult = ({ value, max, label }) => {\n  return (\n    <div className=\"PollResult\">\n      <Typography>{label} - {(value / max) * 100}%</Typography>\n      <div className=\"Progress\" style={{width: `${(value / max) * 100}%`}}></div>\n    </div>\n  )\n}\n\nexport default PollResult\n","// Components\nimport PollResult from './PollResult'\n\n// React\nimport React from 'react'\n// React router\nimport { withRouter } from 'react-router-dom'\n\nclass PollResults extends React.Component {\n\n  // Constructor\n  constructor(props) {\n    super(props)\n    this.defaultState = {\n      optionACount: 0,\n      optionBCount: 0,\n      optionCCount: 0,\n      optionDCount: 0,\n      optionECount: 0,\n      optionATitle: \"\",\n      optionBTitle: \"\",\n      optionCTitle: \"\",\n      optionDTitle: \"\",\n      optionETitle: \"\",\n      All: 0,\n    }\n    this.state = this.defaultState\n  }\n\n  // Set All States\n  setAll(Response) {\n    // Count all votes\n    let All = 0\n    All += Response.optionACount != null && Response.optionATitle != \"None\"  ? Response.optionACount : 0\n    All += Response.optionBCount != null && Response.optionBTitle != \"None\"  ? Response.optionBCount : 0\n    All += Response.optionCCount != null && Response.optionCTitle != \"None\"  ? Response.optionCCount : 0\n    All += Response.optionDCount != null && Response.optionDTitle != \"None\"  ? Response.optionDCount : 0\n    All += Response.optionECount != null && Response.optionETitle != \"None\"  ? Response.optionECount : 0\n\n    // Set state\n    this.setState({\n      optionACount: Response.optionACount,\n      optionBCount: Response.optionBCount,\n      optionCCount: Response.optionCCount,\n      optionDCount: Response.optionDCount,\n      optionECount: Response.optionECount,\n      optionATitle: Response.optionATitle,\n      optionBTitle: Response.optionBTitle,\n      optionCTitle: Response.optionCTitle,\n      optionDTitle: Response.optionDTitle,\n      optionETitle: Response.optionETitle,\n      All\n    })\n  }\n\n  // componentDidMount\n  async componentDidMount() {\n    const response = await fetch(\"/Api/467586970086574653/read\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ pollId: this.props.match.params.pollId })\n    })\n    const data = await response.json()\n\n    this.setAll(data.Response)\n\n    console.log(this.state.optionETitle)\n  }\n\n  // Return Results\n  render() {\n    return (\n      <div className=\"PollResults\">\n        { this.state.optionACount != null && this.state.optionATitle != \"None\" ? <PollResult value={this.state.optionACount} max={this.state.All} label={this.state.optionATitle}/> : <></>}\n        { this.state.optionBCount != null && this.state.optionBTitle != \"None\" ? <PollResult value={this.state.optionBCount} max={this.state.All} label={this.state.optionBTitle}/> : <></>}\n        { this.state.optionCCount != null && this.state.optionCTitle != \"None\" ? <PollResult value={this.state.optionCCount} max={this.state.All} label={this.state.optionCTitle}/> : <></>}\n        { this.state.optionDCount != null && this.state.optionDTitle != \"None\" ? <PollResult value={this.state.optionDCount} max={this.state.All} label={this.state.optionDTitle}/> : <></>}\n        { this.state.optionECount != null && this.state.optionETitle != \"None\" ? <PollResult value={this.state.optionECount} max={this.state.All} label={this.state.optionETitle}/> : <></>}\n      </div>\n    )\n  }\n}\n\nexport default withRouter(PollResults)\n","// Components\nimport ThemeProviderComponent from '../ThemeProviderComponent'\nimport PollForm from './PollForm'\nimport PollResults from './PollResults'\n\n// React\nimport React, { useState } from 'react'\n// Material-ui\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Card, CardContent, Typography, useMediaQuery } from '@material-ui/core'\n\n// Poll Card\nconst PollCard = ({ pollId, pollInfo }) => {\n  // State\n  const [voted, setVoted] = useState(null)\n\n  // Styles\n  const useStyles = makeStyles({\n    Card: {\n      height: \"450px\",\n      width: \"375px\"\n    },\n    CardContent: {\n      boxSizing: \"border-box\",\n      height: \"calc(100% - 16px)\"\n    }\n  })\n  const classes = useStyles()\n\n  // componentDidMount\n  const componentDidMount = async () => {\n    const response = await fetch(\"/Api/467586970086574653/read\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ pollId })\n    })\n    const data = await response.json()\n\n    setVoted(data.Response.voted)\n  }\n\n\n  return (\n    <ThemeProviderComponent onLoad={componentDidMount()}>\n\n      <Card className={classes.Card}>\n        <CardContent className={classes.CardContent}>\n\n          <div clasName=\"PollTitle\">\n            <Typography\n              variant=\"h3\">\n              {pollInfo.title}\n            </Typography>\n          </div>\n\n          { !voted ? (\n            <PollForm pollId={pollId} pollInfo={pollInfo} onVote={() => setVoted(!voted)} />\n          ) : (\n            <PollResults />\n          )}\n\n        </CardContent>\n      </Card>\n\n    </ThemeProviderComponent>\n  )\n}\n\nexport default PollCard\n","// Components\nimport PollCard from './PollCard'\n\n// React\nimport React, { useState } from 'react'\n// React router\nimport { withRouter } from 'react-router-dom'\n\n// CSS\nimport './css/Poll.css'\n\n// Poll Page\nclass PollPage extends React.Component {\n\n  // Constructor\n  constructor(props) {\n    super(props)\n    this.state = { pollInfo: {} }\n  }\n\n  // componentDidMount\n  async componentDidMount() {\n    const response = await fetch(\"/Api/467586970086574653/read\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ pollId: this.props.match.params.pollId })\n    })\n    const data = await response.json()\n\n    this.setState({pollInfo: data.Response})\n  }\n\n  render() {\n    return (\n      <PollCard\n        pollId={ this.props.match.params.pollId }\n        pollInfo={ this.state.pollInfo }/>\n    )\n  }\n}\n\nexport default withRouter(PollPage)\n","// Components\nimport ThemeProviderComponent from '../ThemeProviderComponent'\n\n// React\nimport React, { useState } from 'react'\n// Material-ui\nimport { Card, CardContent, Typography, Button, TextField } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\n// CreatePollForm\nconst CreatePollForm = () => {\n  // State\n  const defaultOptions = {\n    Title: \"\",\n    OptionA: \"\",\n    OptionB: \"\",\n    OptionC: \"\",\n    OptionD: \"\",\n    OptionE: \"\"\n  }\n  const [options, setOptions] = useState(defaultOptions)\n\n  // Styles\n  const useStyles = makeStyles({\n    Card: {\n      height: \"450px\",\n      width: \"375px\"\n    },\n    CardContent: {\n      boxSizing: \"border-box\",\n      height: \"calc(100% - 16px)\"\n    },\n    Form: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      height: \"calc(100% + 24px)\"\n    },\n    Grow: {\n      flexGrow: 1\n    },\n    Button: {\n      justifySelf: \"flex-end\"\n    }\n  })\n  const classes = useStyles()\n\n  // Change Handler\n  const changeHandler = (event) => {\n    setOptions(prevOptions => {\n      return { ...prevOptions, [event.target.name]: event.target.value }\n    })\n  }\n\n  // Submit Handler\n  const submitHandler = async (event) => {\n    event.preventDefault()\n\n    const Body = {}\n\n    for (const Value in options) {\n      if (Value == \"Title\") {Body.title = options[Value]}\n      else if (Value == \"OptionA\") {Body.optionATitle = options[Value].length ? options[Value] : null}\n      else if (Value == \"OptionB\") {Body.optionBTitle = options[Value].length ? options[Value] : null}\n      else if (Value == \"OptionC\") {Body.optionCTitle = options[Value].length ? options[Value] : null}\n      else if (Value == \"OptionD\") {Body.optionDTitle = options[Value].length ? options[Value] : null}\n      else if (Value == \"OptionE\") {Body.optionETitle = options[Value].length ? options[Value] : null}\n      else {}\n    }\n\n    const response = await fetch(\"/Api/467586970086574653/create\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(Body)\n    })\n    const data = await response.json()\n\n    window.location.replace(`/poll/${data.Response.pollId}`)\n\n    setOptions(defaultOptions)\n  }\n\n  return (\n    <ThemeProviderComponent>\n      <Card className={classes.Card}>\n        <CardContent className={classes.CardContent}>\n          <form onSubmit={submitHandler} className={classes.Form}>\n            <TextField\n              name=\"Title\"\n              placeholder=\"Title\"\n              label=\"Poll title\"\n              value={options.Title}\n              onChange={changeHandler}/>\n\n            <TextField\n              name=\"OptionA\"\n              placeholder=\"Option 1\"\n              label=\"Leave blank to exclude\"\n              value={options.OptionA}\n              onChange={changeHandler}/>\n            <TextField\n              name=\"OptionB\"\n              placeholder=\"Option 2\"\n              label=\"Leave blank to exclude\"\n              value={options.OptionB}\n              onChange={changeHandler}/>\n            <TextField\n              name=\"OptionC\"\n              placeholder=\"Option 3\"\n              label=\"Leave blank to exclude\"\n              value={options.OptionC}\n              onChange={changeHandler}/>\n            <TextField\n              name=\"OptionD\"\n              placeholder=\"Option 4\"\n              label=\"Leave blank to exclude\"\n              value={options.OptionD}\n              onChange={changeHandler}/>\n            <TextField\n              name=\"OptionE\"\n              placeholder=\"Option 5\"\n              label=\"Leave blank to exclude\"\n              value={options.OptionE}\n              onChange={changeHandler}/>\n\n            <div className={classes.Grow}></div>\n\n            <Button type=\"submit\" variant=\"contained\" className={classes.Button}>Create Poll</Button>\n          </form>\n        </CardContent>\n      </Card>\n    </ThemeProviderComponent>\n  )\n}\n\nexport default CreatePollForm\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport './css/CreatePoll.css'\n\nimport CreatePollForm from './CreatePollForm'\n\nclass CreatePollPage extends React.Component {\n\n  constructor(props) {\n    super(props)\n  }\n\n  async componentDidMount() {\n  }\n\n  render() {\n    return (\n      <CreatePollForm />\n    )\n  }\n}\n\nexport default withRouter(CreatePollPage)\n","// Components\nimport PollPage from './Components/Poll/PollPage'\nimport CreatePollPage from './Components/CreatePoll/CreatePollPage'\n\n// React router\nimport { BrowserRouter as Router, Route, Switch, useParams } from 'react-router-dom'\n\n// App\nfunction App() {\n  const rootStyles = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    paddingTop: \"50px\"\n  }\n\n  return (\n    <Router>\n\n      <div className=\"App\" style={ rootStyles }>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <p>Hello There</p>\n          </Route>\n\n          <Route exact path=\"/poll/:pollId\">\n            <PollPage />\n          </Route>\n\n          <Route exact path=\"/create-poll\">\n            <CreatePollPage />\n          </Route>\n          \n        </Switch>\n      </div>\n\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}